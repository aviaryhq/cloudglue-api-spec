{
  "openapi": "3.1.0",
  "info": {
    "title": "Cloudglue API",
    "description": "API for Cloudglue",
    "license": {
      "name": "Elastic License 2.0",
      "url": "https://www.elastic.co/licensing/elastic-license"
    },
    "version": "0.1.0"
  },
  "servers": [
    {
      "url": "https://api.cloudglue.dev/v1"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/extract": {
      "post": {
        "tags": ["Extract"],
        "summary": "Create a new extract job",
        "operationId": "createExtract",
        "description": "Creates a new extract",
        "requestBody": {
          "description": "Extract structured data from a video",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewExtract"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Extract"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request or missing required prompt/schema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Extract job not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Monthly extract jobs limit reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred on the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Extract"],
        "summary": "List all extract jobs",
        "operationId": "listExtracts",
        "description": "List all extract jobs with optional filtering",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of extract jobs to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 50,
              "maximum": 100
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of extract jobs to skip",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter extract jobs by status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "processing",
                "completed",
                "failed",
                "not_applicable"
              ]
            }
          },
          {
            "name": "created_before",
            "in": "query",
            "description": "Filter extract jobs created before a specific date (YYYY-MM-DD format), in UTC timezone",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "created_after",
            "in": "query",
            "description": "Filter extract jobs created after a specific date (YYYY-MM-DD format), in UTC timezone",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "Filter extract jobs by the input URL used for extraction",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of extract jobs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtractList"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request or extract config requires at least one option enabled",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Extract job not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Monthly extract jobs limit reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred on the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/extract/{job_id}": {
      "get": {
        "tags": ["Extract"],
        "summary": "Retrieve the current state of an extraction job",
        "operationId": "getExtract",
        "description": "Retrieve the current state of an extraction job",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the extraction job",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with job details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Extract"
                }
              }
            }
          },
          "404": {
            "description": "Job not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred on the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/files": {
      "post": {
        "tags": ["Files"],
        "summary": "Upload a video file that can be used with Cloudglue services",
        "operationId": "uploadFile",
        "description": "Upload a video file that can be used with Cloudglue services",
        "requestBody": {
          "description": "Upload a video file",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/FileUpload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful file upload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request, missing file, invalid metadata, or video duration exceeds limits",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported file type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Resource limits exceeded (monthly upload limit, total duration, file size, or total files)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred on the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Files"],
        "summary": "List files that have been uploaded to Cloudglue",
        "operationId": "listFiles",
        "description": "List files that have been uploaded to Cloudglue",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Filter files by processing status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "processing",
                "completed",
                "failed",
                "not_applicable"
              ]
            }
          },
          {
            "name": "created_before",
            "in": "query",
            "description": "Filter files created before a specific date (YYYY-MM-DD format), in UTC timezone",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "created_after",
            "in": "query",
            "description": "Filter files created after a specific date (YYYY-MM-DD format), in UTC timezone",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of files to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 50,
              "maximum": 100
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of files to skip",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order the files by a specific field",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["created_at", "filename"],
              "default": "created_at"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the files in ascending or descending order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of files",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileList"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred on the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/files/{file_id}": {
      "get": {
        "tags": ["Files"],
        "summary": "Retrieve details about a specific file",
        "operationId": "getFile",
        "description": "Retrieve details about a specific file",
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "description": "The ID of the file to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "404": {
            "description": "File not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred on the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Files"],
        "summary": "Delete a file",
        "operationId": "deleteFile",
        "description": "Delete a file",
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "description": "The ID of the file to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deletion",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileDelete"
                }
              }
            }
          },
          "404": {
            "description": "File not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred on the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Files"],
        "summary": "Update a file",
        "operationId": "updateFile",
        "description": "Update a file",
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "description": "The ID of the file to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "File update parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful file update",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request or malformed file update parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/files/{file_id}/segmentations": {
      "post": {
        "tags": ["Files"],
        "summary": "Create a new segmentation for a file",
        "operationId": "createFileSegmentation",
        "description": "Create a new segmentation for a file using the specified segmentation configuration",
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "description": "The ID of the file to segment",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Segmentation configuration",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  { "$ref": "#/components/schemas/SegmentationConfig" }
                ],
                "type": "object",
                "properties": {
                  "thumbnails_config": {
                    "$ref": "#/components/schemas/ThumbnailsConfig",
                    "description": "Configuration for segment thumbnails. Optional."
                  }
                },
                "description": "Segmentation configuration (root level) with optional thumbnails configuration."
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Segmentation created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Segmentation"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request or file duration is less than window size",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "File not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred on the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Files"],
        "summary": "List segmentations for a file",
        "operationId": "listFileSegmentations",
        "description": "List all segmentations for a specific file",
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "description": "The ID of the file",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of segmentations to return",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from the start of the list",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of segmentations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentationList"
                }
              }
            }
          },
          "404": {
            "description": "File not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred on the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/files/{file_id}/thumbnails": {
      "get": {
        "tags": ["Files", "Thumbnails"],
        "summary": "Get thumbnails for a file",
        "operationId": "getThumbnails",
        "description": "Get all thumbnails for a file",
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "description": "The ID of the file",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "is_default",
            "in": "query",
            "description": "Filter thumbnails by default status. If true, will only return the default thumbnail for the file",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "segmentation_id",
            "in": "query",
            "description": "Filter thumbnails by segmentation ID",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of thumbnails to return",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from the start of the list",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of thumbnails",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThumbnailList"
                }
              }
            }
          },
          "404": {
            "description": "File not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred on the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/collections": {
      "post": {
        "tags": ["Collections"],
        "summary": "Create a new collection to organize and process video files",
        "operationId": "createCollection",
        "description": "Create a new collection to organize and process video files. Collections are used to group files together and process them in a consistent way.",
        "requestBody": {
          "description": "Collection creation parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewCollection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful collection creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Collection"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request or malformed YouTube URL",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Collection name already exists for this account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Resource limits exceeded (total collections or files per collection)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred on the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Collections"],
        "summary": "List all collections",
        "operationId": "listCollections",
        "description": "List all collections",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of collections to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 50,
              "maximum": 100
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of collections to skip",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order the collections by a specific field",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["name", "created_at"],
              "default": "created_at"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the collections in ascending or descending order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            }
          },
          {
            "name": "collection_type",
            "in": "query",
            "description": "Filter collections by type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["entities", "rich-transcripts", "media-descriptions"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of collections",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionList"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred on the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/collections/{collection_id}": {
      "get": {
        "tags": ["Collections"],
        "summary": "Retrieve details about a specific collection",
        "operationId": "getCollection",
        "description": "Retrieve details about a specific collection",
        "parameters": [
          {
            "name": "collection_id",
            "in": "path",
            "required": true,
            "description": "The ID of the collection to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Collection details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Collection"
                }
              }
            }
          },
          "404": {
            "description": "Collection not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred on the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Collections"],
        "summary": "Delete a collection",
        "operationId": "deleteCollection",
        "description": "Delete a collection",
        "parameters": [
          {
            "name": "collection_id",
            "in": "path",
            "required": true,
            "description": "The ID of the collection to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deletion",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionDelete"
                }
              }
            }
          },
          "404": {
            "description": "Collection not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred on the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/collections/{collection_id}/videos": {
      "post": {
        "tags": ["Collections"],
        "summary": "Add a video to a collection",
        "operationId": "addVideo",
        "description": "Add a video to a collection",
        "parameters": [
          {
            "name": "collection_id",
            "in": "path",
            "required": true,
            "description": "The ID of the collection to add the video file to",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "File association parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCollectionFile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful file addition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionFile"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Collection or file not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred on the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Collections"],
        "summary": "List all files in a collection",
        "operationId": "listVideos",
        "description": "List all files in a collection",
        "parameters": [
          {
            "name": "collection_id",
            "in": "path",
            "required": true,
            "description": "The ID of the collection",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of files to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 50,
              "maximum": 100
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of files to skip",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by processing status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "processing",
                "completed",
                "failed",
                "not_applicable"
              ]
            }
          },
          {
            "name": "added_before",
            "in": "query",
            "description": "Filter files added before a specific date (YYYY-MM-DD format), in UTC timezone",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "added_after",
            "in": "query",
            "description": "Filter files added after a specific date (YYYY-MM-DD format), in UTC timezone",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order the files by a specific field",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["added_at", "filename"],
              "default": "added_at"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the files in ascending or descending order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of files in the collection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionFileList"
                }
              }
            }
          },
          "404": {
            "description": "Collection not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred on the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/collections/{collection_id}/videos/{file_id}": {
      "get": {
        "tags": ["Collections"],
        "summary": "Retrieve information about a specific video file in a collection",
        "operationId": "getVideo",
        "description": "Retrieve information about a specific video file in a collection",
        "parameters": [
          {
            "name": "collection_id",
            "in": "path",
            "required": true,
            "description": "The ID of the collection",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "description": "The ID of the file",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File details within the collection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionFile"
                }
              }
            }
          },
          "404": {
            "description": "Collection or file not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred on the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Collections"],
        "summary": "Remove a video file from a collection",
        "operationId": "deleteVideo",
        "description": "Remove a video file from a collection",
        "parameters": [
          {
            "name": "collection_id",
            "in": "path",
            "required": true,
            "description": "The ID of the collection",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "description": "The ID of the file to remove",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful removal",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionFileDelete"
                }
              }
            }
          },
          "404": {
            "description": "Collection or file not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred on the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/collections/{collection_id}/videos/{file_id}/entities": {
      "get": {
        "tags": ["Collections"],
        "summary": "Retrieve all extracted entities for a specific file in a collection",
        "operationId": "getEntities",
        "description": "Retrieve all extracted entities for a specific file in a collection. This API is only available when the a collection is created with collection_type 'entities'",
        "parameters": [
          {
            "name": "collection_id",
            "in": "path",
            "required": true,
            "description": "The ID of the collection",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "description": "The ID of the file",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File entities",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileEntities"
                }
              }
            }
          },
          "400": {
            "description": "Collection type is not 'entities'",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Collection or file not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred on the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/collections/{collection_id}/videos/{file_id}/rich-transcripts": {
      "get": {
        "tags": ["Collections"],
        "summary": "Retrieve rich transcription data for a specific file in a collection",
        "operationId": "getTranscripts",
        "description": "Retrieve rich transcription data for a specific file in a collection. This API is only available when the a collection is created with collection_type 'rich-transcripts'",
        "parameters": [
          {
            "name": "collection_id",
            "in": "path",
            "required": true,
            "description": "The ID of the collection",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "description": "The ID of the file",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "response_format",
            "in": "query",
            "description": "Format for the response",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["json", "markdown"],
              "default": "json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rich transcription data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RichTranscript"
                }
              }
            }
          },
          "400": {
            "description": "Collection type is not 'rich-transcripts'",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Collection or file not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred on the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/collections/{collection_id}/youtube": {
      "post": {
        "tags": ["Collections"],
        "summary": "Add a YouTube video to a collection",
        "operationId": "addYouTubeVideo",
        "description": "Add a YouTube video to a collection by URL",
        "parameters": [
          {
            "name": "collection_id",
            "in": "path",
            "required": true,
            "description": "The ID of the collection to add the YouTube video to",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "YouTube video URL parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddYouTubeCollectionFile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful video addition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionFile"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request or YouTube URL",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Collection not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred on the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/collections/{collection_id}/entities": {
      "get": {
        "tags": ["Collections"],
        "summary": "List all extracted entities for files in a collection",
        "operationId": "listCollectionEntities",
        "description": "List all extracted entities for files in a collection. This API is only available when a collection is created with collection_type 'entities'",
        "parameters": [
          {
            "name": "collection_id",
            "in": "path",
            "required": true,
            "description": "The ID of the collection",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of files to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 50,
              "maximum": 100
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of files to skip",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order the files by a specific field",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["added_at", "filename"],
              "default": "added_at"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the files in ascending or descending order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            }
          },
          {
            "name": "added_before",
            "in": "query",
            "description": "Filter files added before a specific date (YYYY-MM-DD format), in UTC timezone",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "added_after",
            "in": "query",
            "description": "Filter files added after a specific date (YYYY-MM-DD format), in UTC timezone",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of file entities in the collection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionEntitiesList"
                }
              }
            }
          },
          "400": {
            "description": "Collection type is not 'entities'",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Collection not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred on the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/collections/{collection_id}/rich-transcripts": {
      "get": {
        "tags": ["Collections"],
        "summary": "List all rich transcription data for files in a collection",
        "operationId": "listCollectionRichTranscripts",
        "description": "List all rich transcription data for files in a collection. This API is only available when a collection is created with collection_type 'rich-transcripts'",
        "parameters": [
          {
            "name": "collection_id",
            "in": "path",
            "required": true,
            "description": "The ID of the collection",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of files to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20,
              "maximum": 100
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of files to skip",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order the files by a specific field",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["added_at", "filename"],
              "default": "added_at"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the files in ascending or descending order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            }
          },
          {
            "name": "added_before",
            "in": "query",
            "description": "Filter files added before a specific date (YYYY-MM-DD format), in UTC timezone",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "added_after",
            "in": "query",
            "description": "Filter files added after a specific date (YYYY-MM-DD format), in UTC timezone",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "response_format",
            "in": "query",
            "description": "Format for the response",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["json", "markdown"],
              "default": "json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of rich transcription data in the collection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionRichTranscriptsList"
                }
              }
            }
          },
          "400": {
            "description": "Collection type is not 'rich-transcripts'",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Collection not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred on the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/chat/completions": {
      "post": {
        "tags": ["Chat"],
        "summary": "Generate a model response to a conversation that can include references to video content",
        "operationId": "createCompletion",
        "description": "Generate a model response to a conversation that can include references to video content",
        "requestBody": {
          "description": "Chat completion parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatCompletionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatCompletionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Collections not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Chat completion limits reached (monthly or daily)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred on the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/transcribe": {
      "post": {
        "tags": ["Transcribe"],
        "summary": "Create a new transcription job",
        "operationId": "createTranscribe",
        "description": "Creates a new transcription job for video content",
        "requestBody": {
          "description": "Transcription job parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewTranscribe"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transcribe"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request or missing required url/file_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "File not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Chat completion limits reached (monthly or daily)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "509": {
            "description": "Monthly transcription jobs limit reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Transcribe"],
        "summary": "List all transcription jobs",
        "operationId": "listTranscribes",
        "description": "List all transcription jobs with optional filtering",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of transcription jobs to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20,
              "maximum": 100
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of transcription jobs to skip",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter transcription jobs by status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "processing",
                "completed",
                "failed",
                "not_applicable"
              ]
            }
          },
          {
            "name": "created_before",
            "in": "query",
            "description": "Filter transcription jobs created before a specific date (YYYY-MM-DD format), in UTC timezone",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "created_after",
            "in": "query",
            "description": "Filter transcription jobs created after a specific date (YYYY-MM-DD format), in UTC timezone",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "Filter transcription jobs by the input URL used for transcription",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "response_format",
            "in": "query",
            "description": "Format for the response",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["json", "markdown"],
              "default": "json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of transcription jobs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TranscribeList"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred on the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/transcribe/{job_id}": {
      "get": {
        "tags": ["Transcribe"],
        "summary": "Retrieve the current state of a transcription job",
        "operationId": "getTranscribe",
        "description": "Retrieve the current state of a transcription job",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the transcription job",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "response_format",
            "in": "query",
            "description": "Format for the response",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["json", "markdown"],
              "default": "json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with job details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transcribe"
                }
              }
            }
          },
          "404": {
            "description": "Job not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred on the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },

    "/webhooks": {
      "get": {
        "tags": ["Webhooks"],
        "summary": "List all webhooks",
        "operationId": "listWebhooks",
        "description": "List all webhooks",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of webhooks to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 50,
              "maximum": 100
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of webhooks to skip",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order the webhooks by a specific field",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["created_at"],
              "default": "created_at"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the webhooks in ascending or descending order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of webhooks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookList"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred on the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Webhooks"],
        "summary": "Create a webhook",
        "operationId": "createWebhook",
        "description": "Create a webhook",
        "requestBody": {
          "description": "Webhook creation parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Webhook created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "404": {
            "description": "Webhook not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred on the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/{webhook_id}": {
      "get": {
        "tags": ["Webhooks"],
        "summary": "Get a webhook by ID",
        "operationId": "getWebhookById",
        "description": "Get a webhook by ID",
        "parameters": [
          {
            "name": "webhook_id",
            "in": "path",
            "required": true,
            "description": "The ID of the webhook to get",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A webhook",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "404": {
            "description": "Webhook not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred on the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Webhooks"],
        "summary": "Delete a webhook",
        "operationId": "deleteWebhook",
        "description": "Delete a webhook",
        "parameters": [
          {
            "name": "webhook_id",
            "in": "path",
            "required": true,
            "description": "The ID of the webhook to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful removal of webhook",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDeleteResponse"
                }
              }
            }
          },
          "404": {
            "description": "Webhook not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred on the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Webhooks"],
        "summary": "Update a webhook",
        "operationId": "updateWebhook",
        "description": "Update a webhook",
        "parameters": [
          {
            "name": "webhook_id",
            "in": "path",
            "required": true,
            "description": "The ID of the webhook to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Webhook update parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Webhook updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "404": {
            "description": "Webhook not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred on the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/search": {
      "post": {
        "tags": ["Search"],
        "summary": "Search across video files and segments to find relevant content",
        "operationId": "searchContent",
        "description": "Search for videos or video segments in collections to find relevant videos or moments/clips in a video. Supports filtering by metadata, video info, and file properties.\n\n**Important:** Currently only rich-transcript collections support search. For file-level search (scope='file'), the collection must be configured with 'enable_summary: true' in the transcribe_config.",
        "requestBody": {
          "description": "Search parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful search results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Collection not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred on the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/segmentations/{segmentation_id}": {
      "get": {
        "tags": ["Segmentations"],
        "summary": "Get a specific segmentation",
        "operationId": "getSegmentation",
        "description": "Retrieve details about a specific segmentation including its segments",
        "parameters": [
          {
            "name": "segmentation_id",
            "in": "path",
            "required": true,
            "description": "The ID of the segmentation to retrieve",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of segments to return",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from the start of the segments list",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Segmentation details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Segmentation"
                }
              }
            }
          },
          "404": {
            "description": "Segmentation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred on the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Segmentations"],
        "summary": "Delete a segmentation",
        "operationId": "deleteSegmentation",
        "description": "Delete a specific segmentation",
        "parameters": [
          {
            "name": "segmentation_id",
            "in": "path",
            "required": true,
            "description": "The ID of the segmentation to delete",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Segmentation deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "ID of the deleted segmentation"
                    }
                  },
                  "required": ["id"]
                }
              }
            }
          },
          "404": {
            "description": "Segmentation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred on the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/segmentations/{segmentation_id}/thumbnails": {
      "get": {
        "tags": ["Segmentations", "Thumbnails"],
        "summary": "Get thumbnails for a segmentation",
        "operationId": "getSegmentationThumbnails",
        "description": "Get all thumbnails for a segmentation",
        "parameters": [
          {
            "name": "segmentation_id",
            "in": "path",
            "required": true,
            "description": "The ID of the segmentation to retrieve thumbnails for",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "segment_ids",
            "in": "query",
            "description": "Filter thumbnails by segment IDs. If provided, will only return thumbnails for the specified segments. Comma separated list of segment IDs.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of thumbnails to return",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset from the start of the list",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Segmentation thumbnails",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThumbnailList"
                }
              }
            }
          },
          "404": {
            "description": "Segmentation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred on the server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Extract": {
        "required": ["job_id", "status"],
        "type": "object",
        "properties": {
          "job_id": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "processing",
              "completed",
              "failed",
              "not_applicable"
            ]
          },
          "url": {
            "type": "string"
          },
          "created_at": {
            "type": "integer",
            "description": "Unix timestamp of when the job was created"
          },
          "extract_config": {
            "type": "object",
            "description": "Configuration for automatic entity extraction from videos",
            "properties": {
              "prompt": {
                "type": "string",
                "description": "A natural language prompt describing the data to extract. Required if no schema is provided."
              },
              "schema": {
                "type": "object",
                "description": "A more rigid structure if you already know the JSON layout you want. Required if no prompt is provided."
              },
              "enable_video_level_entities": {
                "type": "boolean",
                "description": "Whether to extract entities at the video level",
                "default": false
              },
              "enable_segment_level_entities": {
                "type": "boolean",
                "description": "Whether to extract entities at the segment level",
                "default": true
              }
            }
          },
          "data": {
            "description": "The structured data extracted from the video based on prompt or schema",
            "type": "object",
            "properties": {
              "entities": {
                "type": "object",
                "description": "Entities extracted from the video level"
              },
              "segment_entities": {
                "type": "array",
                "description": "Array of video entities extracted from individual time segments",
                "items": {
                  "type": "object",
                  "properties": {
                    "start_time": {
                      "type": "number",
                      "description": "Start time of the segment in seconds"
                    },
                    "end_time": {
                      "type": "number",
                      "description": "End time of the segment in seconds"
                    },
                    "entities": {
                      "type": "object",
                      "description": "Entities extracted from the segment"
                    }
                  }
                }
              }
            }
          },
          "error": {
            "type": "string",
            "description": "Error message if status is 'failed'"
          }
        }
      },
      "ExtractList": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "enum": ["list"],
            "description": "Object type, always 'list'"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Extract"
            },
            "description": "Array of extract job objects"
          },
          "total": {
            "type": "integer",
            "description": "Total number of extract jobs matching the query"
          },
          "limit": {
            "type": "integer",
            "description": "Number of items returned in this response"
          },
          "offset": {
            "type": "integer",
            "description": "Offset from the start of the list"
          }
        },
        "required": ["object", "data", "total", "limit", "offset"]
      },
      "NewExtract": {
        "allOf": [
          {
            "required": ["url"],
            "type": "object",
            "properties": {
              "url": {
                "description": "Input video URL. Supports YouTube videos and URIs of files uploaded to Cloudglue Files endpoint.\n\nNote that YouTube videos are currently limited to speech and metadata level understanding, for fully fledge multimodal video understanding please upload a file instead to the Files API and use that object instead as input.",
                "type": "string"
              },
              "prompt": {
                "description": "A natural language prompt describing the data you want to extract. Required if no schema is provided.",
                "type": "string"
              },
              "schema": {
                "description": "A more rigid structure if you already know the JSON layout you want. Required if no prompt is provided.",
                "type": "object"
              },
              "enable_video_level_entities": {
                "type": "boolean",
                "description": "Whether to extract entities at the video level",
                "default": false
              },
              "enable_segment_level_entities": {
                "type": "boolean",
                "description": "Whether to extract entities at the segment level",
                "default": true
              },
              "thumbnails_config": {
                "$ref": "#/components/schemas/ThumbnailsConfig"
              }
            }
          },
          {
            "$ref": "#/components/schemas/FileSegmentationConfig"
          }
        ]
      },
      "File": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the file"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "processing",
              "completed",
              "failed",
              "not_applicable"
            ],
            "description": "Processing status of the file"
          },
          "bytes": {
            "oneOf": [
              {
                "type": "integer",
                "description": "Size of the file in bytes"
              },
              {
                "type": "null",
                "description": "No size information available"
              }
            ],
            "description": "Size of the file in bytes, null if not available"
          },
          "created_at": {
            "type": "integer",
            "description": "Unix timestamp of when the file was created"
          },
          "filename": {
            "type": "string",
            "description": "Original filename"
          },
          "uri": {
            "type": "string",
            "description": "Cloudglue URI for the file, to be used in other API calls"
          },
          "metadata": {
            "oneOf": [
              {
                "type": "object",
                "description": "User-provided metadata about the file"
              },
              {
                "type": "null",
                "description": "No metadata provided"
              }
            ],
            "description": "User-provided metadata about the file, null if none provided"
          },
          "video_info": {
            "type": "object",
            "properties": {
              "duration_seconds": {
                "oneOf": [
                  {
                    "type": "number",
                    "description": "Duration of the video in seconds"
                  },
                  {
                    "type": "null",
                    "description": "Duration information not available"
                  }
                ],
                "description": "Duration of the video in seconds, null if not available"
              },
              "height": {
                "oneOf": [
                  {
                    "type": "integer",
                    "description": "Height of the video in pixels"
                  },
                  {
                    "type": "null",
                    "description": "Height information not available"
                  }
                ],
                "description": "Height of the video in pixels, null if not available"
              },
              "width": {
                "oneOf": [
                  {
                    "type": "integer",
                    "description": "Width of the video in pixels"
                  },
                  {
                    "type": "null",
                    "description": "Width information not available"
                  }
                ],
                "description": "Width of the video in pixels, null if not available"
              },
              "format": {
                "oneOf": [
                  {
                    "type": "string",
                    "description": "Format of the video file"
                  },
                  {
                    "type": "null",
                    "description": "Format information not available"
                  }
                ],
                "description": "Format of the video file, null if not available"
              },
              "has_audio": {
                "oneOf": [
                  {
                    "type": "boolean",
                    "description": "Whether the video has audio"
                  },
                  {
                    "type": "null",
                    "description": "Audio information not available"
                  }
                ],
                "description": "Whether the video has audio, null if not available"
              }
            },
            "description": "Information about the video content"
          },
          "thumbnail_url": {
            "type": "string",
            "description": "URL of the thumbnail for the file"
          },
          "source": {
            "type": "string",
            "enum": ["video", "youtube", "s3", "dropbox"],
            "description": "Source of the file"
          }
        },
        "required": ["id", "uri", "status"]
      },
      "FileUpload": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "description": "The video file to be uploaded"
          },
          "metadata": {
            "type": "object",
            "description": "User-provided metadata about the file"
          },
          "enable_segment_thumbnails": {
            "type": "boolean",
            "description": "Whether to generate thumbnails for each segment",
            "default": false
          }
        },
        "required": ["file"]
      },
      "FileList": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "enum": ["list"],
            "description": "Object type, always 'list'"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File"
            },
            "description": "Array of file objects"
          },
          "total": {
            "type": "integer",
            "description": "Total number of files matching the query"
          },
          "limit": {
            "type": "integer",
            "description": "Number of items returned in this response"
          },
          "offset": {
            "type": "integer",
            "description": "Offset from the start of the list"
          }
        },
        "required": ["object", "data", "total", "limit", "offset"]
      },
      "FileDelete": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the deleted file"
          },
          "object": {
            "type": "string",
            "enum": ["file"],
            "description": "Object type, always 'file'"
          }
        },
        "required": ["id", "object"]
      },
      "FileUpdate": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "object",
            "description": "Optional user-provided metadata about the file"
          },
          "filename": {
            "type": "string",
            "description": "New filename for the file"
          }
        }
      },
      "Collection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the collection"
          },
          "object": {
            "type": "string",
            "enum": ["collection"],
            "description": "Object type, always 'collection'"
          },
          "name": {
            "type": "string",
            "description": "Name of the collection"
          },
          "description": {
            "oneOf": [
              {
                "type": "string",
                "description": "Description of the collection's purpose or contents"
              },
              {
                "type": "null",
                "description": "No description provided"
              }
            ],
            "description": "Description of the collection's purpose or contents, null if none provided"
          },
          "collection_type": {
            "type": "string",
            "enum": ["entities", "rich-transcripts", "media-descriptions"],
            "description": "Type of collection, determines how videos are processed and what data is extracted"
          },
          "extract_config": {
            "type": "object",
            "description": "Configuration for automatic entity extraction from videos. Required when collection_type is 'entities'.",
            "properties": {
              "prompt": {
                "type": "string",
                "description": "A natural language prompt describing the data to extract. Required if no schema is provided."
              },
              "schema": {
                "type": "object",
                "description": "A more rigid structure if you already know the JSON layout you want. Required if no prompt is provided."
              },
              "enable_video_level_entities": {
                "type": "boolean",
                "description": "Whether to extract entities at the video level",
                "default": false
              },
              "enable_segment_level_entities": {
                "type": "boolean",
                "description": "Whether to extract entities at the segment level",
                "default": true
              }
            }
          },
          "transcribe_config": {
            "type": "object",
            "description": "Configuration for rich transcription from videos. Used when collection_type is 'rich-transcripts'. If not provided, default values will be used.",
            "properties": {
              "enable_summary": {
                "type": "boolean",
                "description": "Whether to generate video-level and segment-level (moment-level) summaries and titles",
                "default": true
              },
              "enable_speech": {
                "type": "boolean",
                "description": "Whether to generate speech transcript",
                "default": true
              },
              "enable_scene_text": {
                "type": "boolean",
                "description": "Whether to generate scene text extraction",
                "default": false
              },
              "enable_visual_scene_description": {
                "type": "boolean",
                "description": "Whether to generate visual scene description",
                "default": false
              }
            }
          },
          "default_segmentation_config": {
            "$ref": "#/components/schemas/SegmentationConfig",
            "description": "Default segmentation configuration used for files in this collection"
          },
          "default_thumbnails_config": {
            "$ref": "#/components/schemas/ThumbnailsConfig",
            "description": "Default thumbnails configuration used for files in this collection"
          },
          "created_at": {
            "type": "integer",
            "description": "Unix timestamp of when the collection was created"
          },
          "file_count": {
            "type": "integer",
            "description": "Number of files in the collection"
          }
        },
        "required": [
          "id",
          "object",
          "name",
          "created_at",
          "file_count",
          "collection_type"
        ]
      },
      "NewCollection": {
        "type": "object",
        "properties": {
          "collection_type": {
            "type": "string",
            "enum": ["entities", "rich-transcripts"],
            "description": "Type of collection, determines how videos are processed and what data is extracted.\n\n**Collection Types:**\n- **entities**: Extract structured data/entities from videos (requires `extract_config`)\n- **rich-transcripts**: Generate rich transcriptions with speech and visual descriptions (use `transcribe_config`)\n\n⚠️ **Important**: Only provide the config that matches your collection_type. Other configs will be ignored."
          },
          "name": {
            "type": "string",
            "description": "Name of the collection (must be unique within an organization)"
          },
          "description": {
            "oneOf": [
              {
                "type": "string",
                "description": "Description of the collection's purpose or contents"
              },
              {
                "type": "null",
                "description": "No description provided"
              }
            ],
            "description": "Description of the collection's purpose or contents, null if none provided"
          },
          "extract_config": {
            "type": "object",
            "description": "🎯 **Use ONLY when collection_type = 'entities'**\n\nConfiguration for automatic entity extraction from videos. Required for entities collections. This config will be ignored for other collection types.",
            "properties": {
              "prompt": {
                "type": "string",
                "description": "A natural language prompt describing the data to extract. Required if no schema is provided."
              },
              "schema": {
                "type": "object",
                "description": "A more rigid structure if you already know the JSON layout you want. Required if no prompt is provided."
              },
              "enable_video_level_entities": {
                "type": "boolean",
                "description": "Whether to extract entities at the video level",
                "default": false
              },
              "enable_segment_level_entities": {
                "type": "boolean",
                "description": "Whether to extract entities at the segment level",
                "default": true
              }
            }
          },
          "transcribe_config": {
            "type": "object",
            "description": "🎯 **Use ONLY when collection_type = 'rich-transcripts'**\n\nConfiguration for rich transcription from videos. Optional - if not provided, default values will be used. This config will be ignored for other collection types.",
            "properties": {
              "enable_summary": {
                "type": "boolean",
                "description": "Whether to generate video-level and segment-level (moment-level) summaries and titles",
                "default": true
              },
              "enable_speech": {
                "type": "boolean",
                "description": "Whether to generate speech transcript",
                "default": true
              },
              "enable_scene_text": {
                "type": "boolean",
                "description": "Whether to generate scene text extraction",
                "default": false
              },
              "enable_visual_scene_description": {
                "type": "boolean",
                "description": "Whether to generate visual scene description",
                "default": false
              }
            }
          },
          "default_segmentation_config": {
            "$ref": "#/components/schemas/SegmentationConfig",
            "description": "Default segmentation configuration to use for files added to this collection. If not provided, a default uniform segmentation will be used."
          },
          "default_thumbnails_config": {
            "$ref": "#/components/schemas/ThumbnailsConfig",
            "description": "Default thumbnails configuration to use for files added to this collection. If not provided, a default thumbnails configuration will be used."
          }
        },
        "required": ["collection_type", "name"]
      },
      "CollectionList": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "enum": ["list"],
            "description": "Object type, always 'list'"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Collection"
            },
            "description": "Array of collection objects"
          },
          "total": {
            "type": "integer",
            "description": "Total number of collections matching the query"
          },
          "limit": {
            "type": "integer",
            "description": "Number of items returned in this response"
          },
          "offset": {
            "type": "integer",
            "description": "Offset from the start of the list"
          }
        },
        "required": ["object", "data", "total", "limit", "offset"]
      },
      "CollectionDelete": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the deleted collection"
          },
          "object": {
            "type": "string",
            "enum": ["collection"],
            "description": "Object type, always 'collection'"
          }
        },
        "required": ["id", "object"]
      },
      "AddCollectionFile": {
        "allOf": [
          {
            "type": "object",
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "file_id": {
                    "type": "string",
                    "description": "The ID of the file to add to the collection"
                  }
                },
                "required": ["file_id"]
              },
              {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "The URL of the file to add to the collection"
                  }
                },
                "required": ["url"]
              }
            ]
          },
          {
            "$ref": "#/components/schemas/FileSegmentationConfig"
          },
          {
            "type": "object",
            "properties": {
              "thumbnails_config": {
                "$ref": "#/components/schemas/ThumbnailsConfig"
              }
            }
          }
        ]
      },
      "AddYouTubeCollectionFile": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "The URL of the YouTube video to add to the collection.\n\nNote that YouTube videos are currently limited to speech and metadata level understanding, for fully fledge multimodal video understanding please upload a file instead to the Files API and use that object instead as input."
              },
              "metadata": {
                "type": "object",
                "description": "User-provided metadata about the YouTube video"
              }
            },
            "required": ["url"]
          },
          {
            "$ref": "#/components/schemas/FileSegmentationConfig"
          }
        ]
      },
      "CollectionFile": {
        "type": "object",
        "properties": {
          "collection_id": {
            "type": "string",
            "description": "ID of the collection"
          },
          "file_id": {
            "type": "string",
            "description": "ID of the file"
          },
          "object": {
            "type": "string",
            "enum": ["collection_file"],
            "description": "Object type, always 'collection_file'"
          },
          "added_at": {
            "type": "integer",
            "description": "Unix timestamp of when the file was added to the collection"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "processing",
              "completed",
              "failed",
              "not_applicable"
            ],
            "description": "Overall processing status of the file in this collection"
          },
          "file": {
            "$ref": "#/components/schemas/File",
            "description": "The file object"
          },
          "segmentation": {
            "type": "object",
            "description": "Segmentation information for this file in the collection. Only present when the file has been segmented.",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the segmentation"
              },
              "status": {
                "type": "string",
                "enum": [
                  "pending",
                  "processing",
                  "completed",
                  "failed",
                  "not_applicable"
                ],
                "description": "Status of the segmentation job"
              },
              "file_id": {
                "type": "string",
                "format": "uuid",
                "description": "ID of the file that was segmented"
              },
              "segmentation_config": {
                "$ref": "#/components/schemas/SegmentationConfig",
                "description": "Configuration used for this segmentation"
              }
            },
            "required": ["id", "status", "file_id", "segmentation_config"]
          }
        },
        "required": ["collection_id", "file_id", "object", "added_at", "status"]
      },
      "CollectionFileList": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "enum": ["list"],
            "description": "Object type, always 'list'"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CollectionFile"
            },
            "description": "Array of collection file objects"
          },
          "total": {
            "type": "integer",
            "description": "Total number of files matching the query"
          },
          "limit": {
            "type": "integer",
            "description": "Number of items returned in this response"
          },
          "offset": {
            "type": "integer",
            "description": "Offset from the start of the list"
          }
        },
        "required": ["object", "data", "total", "limit", "offset"]
      },
      "CollectionFileDelete": {
        "type": "object",
        "properties": {
          "collection_id": {
            "type": "string",
            "description": "ID of the collection"
          },
          "file_id": {
            "type": "string",
            "description": "ID of the file"
          },
          "object": {
            "type": "string",
            "enum": ["collection_file"],
            "description": "Object type, always 'collection_file'"
          }
        },
        "required": ["collection_id", "file_id", "object"]
      },
      "FileEntities": {
        "type": "object",
        "properties": {
          "collection_id": {
            "type": "string",
            "description": "ID of the collection"
          },
          "file_id": {
            "type": "string",
            "description": "ID of the file"
          },
          "entities": {
            "type": "object",
            "description": "Entities extracted from the file at the video level"
          },
          "segment_entities": {
            "type": "array",
            "description": "Array of video entities extracted from individual time segments",
            "items": {
              "type": "object",
              "properties": {
                "start_time": {
                  "type": "number",
                  "description": "Start time of the segment in seconds"
                },
                "end_time": {
                  "type": "number",
                  "description": "End time of the segment in seconds"
                },
                "entities": {
                  "type": "object",
                  "description": "Entities extracted from the segment"
                }
              }
            }
          }
        },
        "required": [
          "collection_id",
          "file_id",
          "entities",
          "total",
          "limit",
          "offset"
        ]
      },
      "Error": {
        "required": ["error"],
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          }
        }
      },
      "ChatCompletionRequest": {
        "type": "object",
        "properties": {
          "model": {
            "type": "string",
            "description": "Name of the video understanding model to use.",
            "enum": ["nimbus-001"]
          },
          "messages": {
            "type": "array",
            "description": "A list of messages comprising the conversation so far",
            "items": {
              "$ref": "#/components/schemas/ChatMessage"
            }
          },
          "collections": {
            "type": "array",
            "description": "List of collection IDs to use as context for the chat.\n\nNote that 'nimbus-001' only supports collections with collection_type 'rich-transcripts'",
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "maxItems": 1
          },
          "filter": {
            "type": "object",
            "description": "Filter criteria to constrain search results used in chat",
            "properties": {
              "metadata": {
                "type": "array",
                "description": "Filter by file metadata using JSON path expressions",
                "items": {
                  "type": "object",
                  "properties": {
                    "path": {
                      "type": "string",
                      "description": "JSON path on metadata object (e.g. 'my_custom_field', 'category.subcategory')"
                    },
                    "operator": {
                      "type": "string",
                      "enum": [
                        "NotEqual",
                        "Equal",
                        "LessThan",
                        "GreaterThan",
                        "In",
                        "ContainsAny",
                        "ContainsAll"
                      ],
                      "description": "Comparison operator to apply"
                    },
                    "valueText": {
                      "type": "string",
                      "description": "Text value for scalar comparison (used with NotEqual, Equal, LessThan, GreaterThan, In)"
                    },
                    "valueTextArray": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Array of values for array comparisons (used with ContainsAny, ContainsAll)"
                    }
                  },
                  "required": ["path", "operator"]
                }
              },
              "video_info": {
                "type": "array",
                "description": "Filter by video information using JSON path expressions",
                "items": {
                  "type": "object",
                  "properties": {
                    "path": {
                      "type": "string",
                      "description": "JSON path on video_info object (e.g. 'has_audio', 'duration_seconds')"
                    },
                    "operator": {
                      "type": "string",
                      "enum": [
                        "NotEqual",
                        "Equal",
                        "LessThan",
                        "GreaterThan",
                        "In",
                        "ContainsAny",
                        "ContainsAll"
                      ],
                      "description": "Comparison operator to apply"
                    },
                    "valueText": {
                      "type": "string",
                      "description": "Text value for scalar comparison (used with NotEqual, Equal, LessThan, GreaterThan, In)"
                    },
                    "valueTextArray": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Array of values for array comparisons (used with ContainsAny, ContainsAll)"
                    }
                  },
                  "required": ["path", "operator"]
                }
              },
              "file": {
                "type": "array",
                "description": "Filter by file properties using JSON path expressions",
                "items": {
                  "type": "object",
                  "properties": {
                    "path": {
                      "type": "string",
                      "description": "JSON path on file object (e.g. 'uri', 'id', 'filename', 'created_at', 'bytes')"
                    },
                    "operator": {
                      "type": "string",
                      "enum": [
                        "NotEqual",
                        "Equal",
                        "LessThan",
                        "GreaterThan",
                        "In",
                        "ContainsAny",
                        "ContainsAll"
                      ],
                      "description": "Comparison operator to apply"
                    },
                    "valueText": {
                      "type": "string",
                      "description": "Text value for scalar comparison (used with NotEqual, Equal, LessThan, GreaterThan, In)"
                    },
                    "valueTextArray": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Array of values for array comparisons (used with ContainsAny, ContainsAll)"
                    }
                  },
                  "required": ["path", "operator"]
                }
              }
            }
          },
          "force_search": {
            "type": "boolean",
            "description": "Whether to force the model to always perform a search when answering questions, even if it believes it knows the answer",
            "default": false
          },
          "include_citations": {
            "type": "boolean",
            "description": "Whether to include citations to specific video segments",
            "default": true
          },
          "temperature": {
            "type": "number",
            "description": "Sampling temperature to use, between 0 and 2",
            "minimum": 0,
            "maximum": 2,
            "default": 0.7
          },
          "top_p": {
            "type": "number",
            "description": "An alternative to sampling with temperature, called nucleus sampling",
            "minimum": 0,
            "maximum": 1,
            "default": 1.0
          },
          "max_tokens": {
            "type": "integer",
            "description": "The maximum number of tokens to generate in the chat completion",
            "default": 1024
          }
        },
        "required": ["model", "messages", "collections"]
      },
      "ChatMessage": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "The role of the message author",
            "enum": ["system", "user", "assistant"]
          },
          "content": {
            "type": "string",
            "description": "The content of the message"
          },
          "name": {
            "type": "string",
            "description": "The name of the author of this message"
          }
        },
        "required": ["role", "content"]
      },
      "ChatCompletionResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for this chat completion"
          },
          "object": {
            "type": "string",
            "description": "Object type, always \"chat.completion\""
          },
          "created": {
            "type": "integer",
            "description": "Unix timestamp of when the chat completion was created"
          },
          "model": {
            "type": "string",
            "description": "The model used for the chat completion"
          },
          "choices": {
            "type": "array",
            "description": "The generated responses",
            "items": {
              "type": "object",
              "properties": {
                "index": {
                  "type": "integer",
                  "description": "The index of this choice"
                },
                "message": {
                  "$ref": "#/components/schemas/ChatMessage",
                  "description": "The chat message generated by the model"
                },
                "citations": {
                  "type": "array",
                  "description": "Citations to specific video segments that informed the response",
                  "items": {
                    "type": "object",
                    "properties": {
                      "collection_id": {
                        "type": "string",
                        "description": "ID of the collection containing the cited video"
                      },
                      "file_id": {
                        "type": "string",
                        "description": "ID of the file being cited"
                      },
                      "segment_id": {
                        "type": "string",
                        "description": "ID of the segment being cited"
                      },
                      "start_time": {
                        "oneOf": [
                          {
                            "type": "string",
                            "description": "Start time of the cited segment in seconds"
                          },
                          {
                            "type": "number",
                            "description": "Start time of the cited segment in seconds"
                          }
                        ],
                        "description": "Start time of the cited segment in seconds"
                      },
                      "end_time": {
                        "oneOf": [
                          {
                            "type": "string",
                            "description": "End time of the cited segment in seconds"
                          },
                          {
                            "type": "number",
                            "description": "End time of the cited segment in seconds"
                          }
                        ],
                        "description": "End time of the cited segment in seconds"
                      },
                      "text": {
                        "type": "string",
                        "description": "(Deprecated) Relevant text from the segment; use context and relevant_sources instead"
                      },
                      "context": {
                        "type": "string",
                        "description": "Short explanation of the relevance of the segment to the query provided as context"
                      },
                      "relevant_sources": {
                        "type": "array",
                        "description": "List of source modalities in segment that are relevant for this citation",
                        "items": {
                          "type": "object",
                          "properties": {
                            "text": {
                              "type": "string",
                              "description": "Source modality, one of visual_scene_description, scene_text, speech"
                            }
                          }
                        }
                      },
                      "visual_scene_description": {
                        "type": "array",
                        "description": "Description of visual content in the segment",
                        "items": {
                          "type": "object",
                          "properties": {
                            "text": {
                              "type": "string",
                              "description": "Description of visual content in the segment"
                            },
                            "start_time": {
                              "type": "number",
                              "description": "Start time of the visual content in seconds"
                            },
                            "end_time": {
                              "type": "number",
                              "description": "End time of the visual content in seconds"
                            }
                          }
                        }
                      },
                      "scene_text": {
                        "type": "array",
                        "description": "Text detected on screen in the segment",
                        "items": {
                          "type": "object",
                          "properties": {
                            "text": {
                              "type": "string",
                              "description": "Text detected on screen"
                            },
                            "start_time": {
                              "type": "number",
                              "description": "Start time of the text in seconds"
                            },
                            "end_time": {
                              "type": "number",
                              "description": "End time of the text in seconds"
                            }
                          }
                        }
                      },
                      "speech": {
                        "type": "array",
                        "description": "Transcription of speech in the segment",
                        "items": {
                          "type": "object",
                          "properties": {
                            "speaker": {
                              "type": "string",
                              "description": "Identified speaker"
                            },
                            "text": {
                              "type": "string",
                              "description": "Transcribed speech text"
                            },
                            "start_time": {
                              "type": "number",
                              "description": "Start time of speech in seconds"
                            },
                            "end_time": {
                              "type": "number",
                              "description": "End time of speech in seconds"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "usage": {
            "type": "object",
            "description": "Usage statistics for the completion request",
            "properties": {
              "prompt_tokens": {
                "type": "integer",
                "description": "Number of tokens in the prompt"
              },
              "completion_tokens": {
                "type": "integer",
                "description": "Number of tokens in the generated completion"
              },
              "total_tokens": {
                "type": "integer",
                "description": "Total number of tokens used in the request"
              }
            }
          }
        }
      },
      "Transcribe": {
        "required": ["job_id", "status"],
        "type": "object",
        "properties": {
          "job_id": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "processing",
              "completed",
              "failed",
              "not_applicable"
            ]
          },
          "url": {
            "type": "string",
            "description": "The URL of the processed video"
          },
          "created_at": {
            "type": "integer",
            "description": "Unix timestamp of when the job was created"
          },
          "transcribe_config": {
            "type": "object",
            "description": "Configuration for rich transcription from videos",
            "properties": {
              "enable_summary": {
                "type": "boolean",
                "description": "Whether the user requested to generate video-level and segment-level (moment-level) summaries and titles"
              },
              "enable_speech": {
                "type": "boolean",
                "description": "Whether the user requested to generate speech transcript"
              },
              "enable_visual_scene_description": {
                "type": "boolean",
                "description": "Whether the user requested to generate visual scene description"
              },
              "enable_scene_text": {
                "type": "boolean",
                "description": "Whether the user requested to generate scene text"
              }
            }
          },
          "data": {
            "type": "object",
            "properties": {
              "content": {
                "type": "string",
                "description": "Content string returned based on formatting, e.g. set to markdown text when response_format=markdown is requested"
              },
              "title": {
                "type": "string",
                "description": "Generated title of the video; for YouTube videos, this is the title of the video as it appears on YouTube"
              },
              "summary": {
                "type": "string",
                "description": "Generated video level summary; for YouTube videos, this is the summary of the video as it appears on YouTube"
              },
              "speech": {
                "type": "array",
                "description": "Array of speech transcriptions",
                "items": {
                  "type": "object",
                  "properties": {
                    "text": {
                      "type": "string",
                      "description": "Transcribed speech text"
                    },
                    "start_time": {
                      "type": "number",
                      "description": "Start time of speech in seconds"
                    },
                    "end_time": {
                      "type": "number",
                      "description": "End time of speech in seconds"
                    }
                  }
                }
              },
              "visual_scene_description": {
                "type": "array",
                "description": "Array of visual descriptions",
                "items": {
                  "type": "object",
                  "properties": {
                    "text": {
                      "type": "string",
                      "description": "Description of visual content"
                    },
                    "start_time": {
                      "type": "number",
                      "description": "Start time of visual content in seconds"
                    },
                    "end_time": {
                      "type": "number",
                      "description": "End time of visual content in seconds"
                    }
                  }
                }
              },
              "scene_text": {
                "type": "array",
                "description": "Array of scene text extractions",
                "items": {
                  "type": "object",
                  "properties": {
                    "text": {
                      "type": "string",
                      "description": "Text detected on screen"
                    },
                    "start_time": {
                      "type": "number",
                      "description": "Start time of text in seconds"
                    },
                    "end_time": {
                      "type": "number",
                      "description": "End time of text in seconds"
                    }
                  }
                }
              },
              "segment_summary": {
                "type": "array",
                "description": "Array of summary information for each segment of the video. Only available when enable_summary is set to true in the transcribe configuration.",
                "items": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "description": "Generated segment-level title"
                    },
                    "summary": {
                      "type": "string",
                      "description": "Generated segment-level summary"
                    },
                    "start_time": {
                      "type": "number",
                      "description": "Start time of segment in seconds"
                    },
                    "end_time": {
                      "type": "number",
                      "description": "End time of segment in seconds"
                    }
                  }
                }
              }
            }
          },
          "error": {
            "type": "string",
            "description": "Error message if status is 'failed'"
          }
        }
      },
      "NewTranscribe": {
        "allOf": [
          {
            "type": "object",
            "required": ["url"],
            "properties": {
              "url": {
                "description": "Input video URL. Supports YouTube videos and URIs of files uploaded to Cloudglue Files endpoint.\n\nNote that YouTube videos are currently limited to speech level understanding only.",
                "type": "string"
              },
              "enable_summary": {
                "description": "Whether to generate video-level and segment-level (moment-level) summaries and titles",
                "type": "boolean",
                "default": true
              },
              "enable_speech": {
                "description": "Whether to generate speech transcript",
                "type": "boolean",
                "default": true
              },
              "enable_visual_scene_description": {
                "description": "Whether to generate visual scene description",
                "type": "boolean",
                "default": false
              },
              "enable_scene_text": {
                "description": "Whether to generate scene text extraction",
                "type": "boolean",
                "default": false
              },
              "thumbnails_config": {
                "$ref": "#/components/schemas/ThumbnailsConfig"
              }
            }
          },
          {
            "$ref": "#/components/schemas/FileSegmentationConfig"
          }
        ]
      },
      "TranscribeList": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "enum": ["list"],
            "description": "Object type, always 'list'"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transcribe"
            },
            "description": "Array of transcription job objects"
          },
          "total": {
            "type": "integer",
            "description": "Total number of transcription jobs matching the query"
          },
          "limit": {
            "type": "integer",
            "description": "Number of items returned in this response"
          }
        },
        "required": ["object", "data", "total", "limit"]
      },
      "RichTranscript": {
        "type": "object",
        "required": ["collection_id", "file_id"],
        "properties": {
          "collection_id": {
            "type": "string",
            "description": "The ID of the collection"
          },
          "file_id": {
            "type": "string",
            "description": "The ID of the file"
          },
          "content": {
            "type": "string",
            "description": "Content string returned based on formatting, e.g. set to markdown text when response_format=markdown is requested"
          },
          "title": {
            "type": "string",
            "description": "Generated title of the video"
          },
          "summary": {
            "type": "string",
            "description": "Generated video level summary"
          },
          "speech": {
            "type": "array",
            "description": "Array of speech transcriptions",
            "items": {
              "type": "object",
              "properties": {
                "text": {
                  "type": "string",
                  "description": "Transcribed speech text"
                },
                "start_time": {
                  "type": "number",
                  "description": "Start time of speech in seconds"
                },
                "end_time": {
                  "type": "number",
                  "description": "End time of speech in seconds"
                }
              }
            }
          },
          "visual_scene_description": {
            "type": "array",
            "description": "Array of visual descriptions",
            "items": {
              "type": "object",
              "properties": {
                "text": {
                  "type": "string",
                  "description": "Description of visual content"
                },
                "start_time": {
                  "type": "number",
                  "description": "Start time of visual content in seconds"
                },
                "end_time": {
                  "type": "number",
                  "description": "End time of visual content in seconds"
                }
              }
            }
          },
          "scene_text": {
            "type": "array",
            "description": "Array of scene text extractions",
            "items": {
              "type": "object",
              "properties": {
                "text": {
                  "type": "string",
                  "description": "Text detected on screen"
                },
                "start_time": {
                  "type": "number",
                  "description": "Start time of text in seconds"
                },
                "end_time": {
                  "type": "number",
                  "description": "End time of text in seconds"
                }
              }
            }
          },
          "segment_summary": {
            "type": "array",
            "description": "Array of summary information for each segment of the video. Only available when enable_summary is set to true in the transcribe configuration.",
            "items": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "Generated segment-level title"
                },
                "summary": {
                  "type": "string",
                  "description": "Generated segment-level summary"
                },
                "start_time": {
                  "type": "number",
                  "description": "Start time of segment in seconds"
                },
                "end_time": {
                  "type": "number",
                  "description": "End time of segment in seconds"
                }
              }
            }
          }
        }
      },
      "Webhook": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the webhook"
          },
          "object": {
            "type": "string",
            "enum": ["webhook"],
            "description": "Object type, always 'webhook'"
          },
          "created_at": {
            "type": "integer",
            "description": "Unix timestamp of when the webhook was created"
          },
          "webhook_secret": {
            "type": "string",
            "description": "Secret used to verify the webhook request"
          },
          "endpoint": {
            "type": "string",
            "description": "URL of the webhook endpoint"
          },
          "active": {
            "type": "boolean",
            "description": "Whether the webhook is active"
          },
          "description": {
            "type": "string",
            "description": "Description of the webhook"
          },
          "subscribed_events": {
            "type": "array",
            "description": "Events that the webhook is subscribed to",
            "items": {
              "$ref": "#/components/schemas/WebhookEvents"
            }
          }
        },
        "required": [
          "id",
          "object",
          "created_at",
          "subscribed_events",
          "active",
          "endpoint",
          "webhook_secret"
        ]
      },
      "WebhookList": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "enum": ["list"],
            "description": "Object type, always 'list'"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Webhook"
            },
            "description": "Array of webhook objects"
          },
          "total": {
            "type": "integer",
            "description": "Total number of webhooks matching the query"
          },
          "limit": {
            "type": "integer",
            "description": "Number of items returned in this response"
          },
          "offset": {
            "type": "integer",
            "description": "Offset from the start of the list"
          }
        },
        "required": ["object", "data", "total", "limit", "offset"]
      },
      "WebhookEvents": {
        "type": "string",
        "enum": [
          "describe.job.processing",
          "describe.job.completed",
          "describe.job.failed",
          "extract.job.processing",
          "extract.job.completed",
          "extract.job.failed",
          "file.job.processing",
          "file.job.completed",
          "file.job.failed",
          "file.job.deleted",
          "collection.file.job.processing",
          "collection.file.job.completed",
          "collection.file.job.failed",
          "collection.file.job.deleted"
        ],
        "description": "Webhook events that can be subscribed to"
      },
      "WebhookDeleteResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the webhook"
          },
          "object": {
            "type": "string",
            "enum": ["webhook"],
            "description": "Object type, always 'webhook'"
          }
        },
        "required": ["id", "object"]
      },
      "WebhookCreateRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the webhook"
          },
          "endpoint": {
            "type": "string",
            "description": "URL of the webhook endpoint"
          },
          "subscribed_events": {
            "type": "array",
            "description": "Events that the webhook is subscribed to",
            "items": {
              "$ref": "#/components/schemas/WebhookEvents"
            }
          }
        }
      },
      "WebhookUpdateRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the webhook"
          },
          "endpoint": {
            "type": "string",
            "description": "URL of the webhook endpoint"
          },
          "subscribed_events": {
            "type": "array",
            "description": "Events that the webhook is subscribed to",
            "items": {
              "$ref": "#/components/schemas/WebhookEvents"
            }
          },
          "active": {
            "type": "boolean",
            "description": "Whether the webhook is active"
          }
        }
      },
      "CollectionEntitiesList": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "enum": ["list"],
            "description": "Object type, always 'list'"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "file_id": {
                  "type": "string",
                  "description": "ID of the file"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "entities": {
                      "type": "object",
                      "description": "Entities extracted from the file at the video level"
                    },
                    "segment_entities": {
                      "type": "array",
                      "description": "Array of video entities extracted from individual time segments",
                      "items": {
                        "type": "object",
                        "properties": {
                          "start_time": {
                            "type": "number",
                            "description": "Start time of the segment in seconds"
                          },
                          "end_time": {
                            "type": "number",
                            "description": "End time of the segment in seconds"
                          },
                          "entities": {
                            "type": "object",
                            "description": "Entities extracted from the segment"
                          }
                        }
                      }
                    }
                  },
                  "required": ["entities"]
                }
              },
              "required": ["file_id", "data"]
            },
            "description": "Array of file entities"
          },
          "total": {
            "type": "integer",
            "description": "Total number of files with entities matching the query"
          },
          "limit": {
            "type": "integer",
            "description": "Number of items returned in this response"
          },
          "offset": {
            "type": "integer",
            "description": "Offset from the start of the list"
          }
        },
        "required": ["object", "data", "total", "limit", "offset"]
      },
      "CollectionRichTranscriptsList": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "enum": ["list"],
            "description": "Object type, always 'list'"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "file_id": {
                  "type": "string",
                  "description": "ID of the file"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "string",
                      "description": "Content string returned based on formatting, e.g. set to markdown text when response_format=markdown is requested"
                    },
                    "title": {
                      "type": "string",
                      "description": "Generated title of the video"
                    },
                    "summary": {
                      "type": "string",
                      "description": "Generated video level summary"
                    },
                    "speech": {
                      "type": "array",
                      "description": "Array of speech transcriptions",
                      "items": {
                        "type": "object",
                        "properties": {
                          "text": {
                            "type": "string",
                            "description": "Transcribed speech text"
                          },
                          "start_time": {
                            "type": "number",
                            "description": "Start time of speech in seconds"
                          },
                          "end_time": {
                            "type": "number",
                            "description": "End time of speech in seconds"
                          }
                        }
                      }
                    },
                    "visual_scene_description": {
                      "type": "array",
                      "description": "Array of visual descriptions",
                      "items": {
                        "type": "object",
                        "properties": {
                          "text": {
                            "type": "string",
                            "description": "Description of visual content"
                          },
                          "start_time": {
                            "type": "number",
                            "description": "Start time of visual content in seconds"
                          },
                          "end_time": {
                            "type": "number",
                            "description": "End time of visual content in seconds"
                          }
                        }
                      }
                    },
                    "scene_text": {
                      "type": "array",
                      "description": "Array of scene text extractions",
                      "items": {
                        "type": "object",
                        "properties": {
                          "text": {
                            "type": "string",
                            "description": "Text detected on screen"
                          },
                          "start_time": {
                            "type": "number",
                            "description": "Start time of text in seconds"
                          },
                          "end_time": {
                            "type": "number",
                            "description": "End time of text in seconds"
                          }
                        }
                      }
                    },
                    "segment_summary": {
                      "type": "array",
                      "description": "Array of summary information for each segment of the video. Only available when enable_summary is set to true in the transcribe configuration.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string",
                            "description": "Generated segment-level title"
                          },
                          "summary": {
                            "type": "string",
                            "description": "Generated segment-level summary"
                          },
                          "start_time": {
                            "type": "number",
                            "description": "Start time of segment in seconds"
                          },
                          "end_time": {
                            "type": "number",
                            "description": "End time of segment in seconds"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "required": ["file_id", "data"]
            },
            "description": "Array of rich transcription data"
          },
          "total": {
            "type": "integer",
            "description": "Total number of files with rich transcription data matching the query"
          },
          "limit": {
            "type": "integer",
            "description": "Number of items returned in this response"
          },
          "offset": {
            "type": "integer",
            "description": "Offset from the start of the list"
          }
        },
        "required": ["object", "data", "total", "limit", "offset"]
      },
      "SegmentationUniformConfig": {
        "type": "object",
        "required": ["window_seconds"],
        "properties": {
          "window_seconds": {
            "type": "number",
            "minimum": 2,
            "maximum": 60,
            "description": "The duration of each segment in seconds"
          },
          "hop_seconds": {
            "type": "number",
            "minimum": 1,
            "maximum": 60,
            "description": "The offset between the start of new windows. This means there can be overlap between segments. If not provided, defaults to window_seconds."
          }
        }
      },
      "SegmentationShotDetectorConfig": {
        "type": "object",
        "required": ["detector"],
        "properties": {
          "threshold": {
            "type": "number",
            "minimum": 0,
            "nullable": true,
            "description": "Detection sensitivity threshold - lower values create more segments:\n\n• **adaptive**: Sensitivity to scene changes (default: 3.0). Lower values detect more subtle transitions.\n• **content**: Sensitivity to visual differences (default: 27.0). Lower values detect smaller changes in color/lighting."
          },
          "min_seconds": {
            "type": "number",
            "minimum": 2,
            "maximum": 60,
            "nullable": true,
            "description": "The minimum length of a shot in seconds"
          },
          "max_seconds": {
            "type": "number",
            "minimum": 2,
            "maximum": 60,
            "nullable": true,
            "description": "The maximum length of a shot in seconds"
          },
          "detector": {
            "type": "string",
            "enum": ["adaptive", "content"],
            "description": "The detector strategy to use:\n\n• **adaptive**: Designed for dynamic footage with camera movement, panning, or action. Examples: sports broadcasts, drone footage, handheld documentaries, action movies, live events.\n• **content**: Optimized for controlled footage with clear visual transitions. Examples: studio interviews, corporate videos, educational content, product demos, scripted content."
          }
        }
      },
      "SegmentationConfig": {
        "type": "object",
        "description": "Configuration for video segmentation. **Choose a strategy and provide ONLY the corresponding config:**\n\n• **uniform**: Provide `uniform_config`, do NOT provide `shot_detector_config`\n• **shot-detector**: Provide `shot_detector_config`, do NOT provide `uniform_config`\n\nOptionally specify `start_time_seconds` and `end_time_seconds` to limit segmentation to a portion of the video.",
        "required": ["strategy"],
        "properties": {
          "strategy": {
            "type": "string",
            "enum": ["uniform", "shot-detector"],
            "description": "Segmentation strategy - determines which config you must provide"
          },
          "uniform_config": {
            "$ref": "#/components/schemas/SegmentationUniformConfig",
            "description": "🎯 **REQUIRED when strategy = 'uniform'** - Configuration for uniform segmentation. Do NOT provide when using shot-detector strategy."
          },
          "shot_detector_config": {
            "$ref": "#/components/schemas/SegmentationShotDetectorConfig",
            "description": "🎯 **REQUIRED when strategy = 'shot-detector'** - Configuration for shot detection segmentation. Do NOT provide when using uniform strategy."
          },
          "start_time_seconds": {
            "type": "number",
            "minimum": 0,
            "description": "Optional: The start time of the video in seconds to start segmenting from"
          },
          "end_time_seconds": {
            "type": "number",
            "minimum": 0,
            "description": "Optional: The end time of the video in seconds to stop segmenting at"
          }
        }
      },
      "ThumbnailsConfig": {
        "type": "object",
        "required": ["enable_segment_thumbnails"],
        "properties": {
          "enable_segment_thumbnails": {
            "type": "boolean",
            "description": "Whether to enable segment thumbnails. If not provided will use default to false. Cannot be used together with segmentation_id."
          }
        }
      },
      "FileSegmentationConfig": {
        "type": "object",
        "properties": {
          "segmentation_id": {
            "type": "string",
            "format": "uuid",
            "description": "Segmentation job id to use. If not provided will use default to uniform 20s segmentation. Cannot be provided together with segmentation_config."
          },
          "segmentation_config": {
            "$ref": "#/components/schemas/SegmentationConfig",
            "description": "Configuration for video segmentation. Cannot be provided together with segmentation_id."
          }
        }
      },
      "Segmentation": {
        "type": "object",
        "required": [
          "segmentation_id",
          "status",
          "created_at",
          "file_id",
          "segmentation_config",
          "thumbnails_config"
        ],
        "properties": {
          "segmentation_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the segmentation job"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "processing",
              "completed",
              "failed",
              "not_applicable"
            ],
            "description": "Status of the segmentation job. If a job has the status 'not_applicable' it means that we were unable to find any appropriate scenes for this video. This can be possible if you use the shot-detector strategy."
          },
          "created_at": {
            "type": "number",
            "minimum": 0,
            "description": "Unix timestamp of when the segmentation was created"
          },
          "file_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the file this segmentation belongs to"
          },
          "segmentation_config": {
            "$ref": "#/components/schemas/SegmentationConfig"
          },
          "thumbnails_config": {
            "$ref": "#/components/schemas/ThumbnailsConfig"
          },
          "total_segments": {
            "type": "number",
            "minimum": 0,
            "description": "Total number of segments in this segmentation (only present when status is completed)"
          },
          "data": {
            "type": "object",
            "description": "Segment data with pagination (only present when status is completed and segments exist)",
            "required": ["object", "total", "limit", "offset"],
            "properties": {
              "object": {
                "type": "string",
                "enum": ["list"],
                "description": "Object type, always 'list'"
              },
              "segments": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": ["id", "start_time", "end_time"],
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Unique identifier for the segment"
                    },
                    "start_time": {
                      "type": "number",
                      "description": "Start time of the segment in seconds"
                    },
                    "end_time": {
                      "type": "number",
                      "description": "End time of the segment in seconds"
                    },
                    "thumbnail_url": {
                      "type": "string",
                      "description": "URL of the thumbnail for the segment if it exists"
                    }
                  }
                }
              },
              "total": {
                "type": "integer",
                "description": "Total number of segments"
              },
              "limit": {
                "type": "integer",
                "description": "Number of segments returned in this response"
              },
              "offset": {
                "type": "integer",
                "description": "Offset from the start of the segments list"
              }
            }
          }
        }
      },

      "SegmentationList": {
        "type": "object",
        "required": ["object", "data", "total", "limit", "offset"],
        "properties": {
          "object": {
            "type": "string",
            "enum": ["list"],
            "description": "Object type, always 'list'"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Segmentation"
            },
            "description": "Array of segmentation objects"
          },
          "total": {
            "type": "integer",
            "description": "Total number of segmentations matching the query"
          },
          "limit": {
            "type": "integer",
            "description": "Number of items returned in this response"
          },
          "offset": {
            "type": "integer",
            "description": "Offset from the start of the list"
          }
        }
      },
      "SearchRequest": {
        "type": "object",
        "required": ["scope", "collections", "query"],
        "properties": {
          "scope": {
            "type": "string",
            "enum": ["file", "segment"],
            "description": "Search scope - 'file' searches at file level (requires collections with enable_summary=true), 'segment' searches at segment level"
          },
          "collections": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "minItems": 1,
            "description": "List of collection IDs to search within. Must be rich-transcript collections (collection_type='rich-transcripts'). For file-level search, collections must have 'enable_summary: true' in transcribe_config."
          },
          "query": {
            "type": "string",
            "minLength": 1,
            "description": "Text search query to find relevant content"
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 10,
            "description": "Maximum number of search results to return"
          },
          "filter": {
            "$ref": "#/components/schemas/SearchFilter"
          }
        }
      },
      "SearchFilter": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "array",
            "description": "Filter by file metadata using JSON path expressions",
            "items": {
              "$ref": "#/components/schemas/SearchFilterCriteria"
            }
          },
          "video_info": {
            "type": "array",
            "description": "Filter by video information",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SearchFilterCriteria"
                },
                {
                  "type": "object",
                  "properties": {
                    "path": {
                      "type": "string",
                      "enum": ["duration_seconds", "has_audio"]
                    }
                  }
                }
              ]
            }
          },
          "file": {
            "type": "array",
            "description": "Filter by file properties",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SearchFilterCriteria"
                },
                {
                  "type": "object",
                  "properties": {
                    "path": {
                      "type": "string",
                      "enum": ["bytes", "filename", "uri", "created_at", "id"]
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "SearchFilterCriteria": {
        "type": "object",
        "required": ["path", "operator"],
        "properties": {
          "path": {
            "type": "string",
            "description": "JSON path for the field to filter on"
          },
          "operator": {
            "type": "string",
            "enum": [
              "NotEqual",
              "Equal",
              "LessThan",
              "GreaterThan",
              "ContainsAny",
              "ContainsAll",
              "In"
            ],
            "description": "Comparison operator to apply"
          },
          "valueText": {
            "type": "string",
            "description": "Text value for scalar comparison (used with NotEqual, Equal, LessThan, GreaterThan)"
          },
          "valueTextArray": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of values for array comparisons (used with ContainsAny, ContainsAll, In)"
          }
        }
      },
      "SearchResponse": {
        "type": "object",
        "required": ["object", "query", "scope", "results", "total", "limit"],
        "properties": {
          "object": {
            "type": "string",
            "enum": ["search"],
            "description": "Object type, always 'search'"
          },
          "query": {
            "type": "string",
            "description": "The search query that was executed"
          },
          "scope": {
            "type": "string",
            "enum": ["file", "segment"],
            "description": "The search scope that was used"
          },
          "results": {
            "type": "array",
            "description": "Array of search results ranked by relevance score",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/FileSearchResult"
                },
                {
                  "$ref": "#/components/schemas/SegmentSearchResult"
                }
              ]
            }
          },
          "total": {
            "type": "integer",
            "description": "Total number of results returned"
          },
          "limit": {
            "type": "integer",
            "description": "The limit that was applied to the search"
          }
        }
      },
      "FileSearchResult": {
        "type": "object",
        "required": ["type", "file_id", "collection_id", "score", "id"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["file"],
            "description": "Result type, always 'file'"
          },
          "file_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the file"
          },
          "collection_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the collection containing this file"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the search document"
          },
          "score": {
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "description": "Relevance score (0-1, higher is more relevant)"
          },
          "filename": {
            "type": "string",
            "nullable": true,
            "description": "Original filename of the video"
          },
          "summary": {
            "type": "string",
            "nullable": true,
            "description": "Generated summary of the video"
          },
          "generated_title": {
            "type": "string",
            "nullable": true,
            "description": "Generated title of the video"
          }
        }
      },
      "SegmentSearchResult": {
        "type": "object",
        "required": [
          "type",
          "file_id",
          "collection_id",
          "segment_id",
          "score",
          "id",
          "start_time",
          "end_time"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["segment"],
            "description": "Result type, always 'segment'"
          },
          "file_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the file"
          },
          "collection_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the collection containing this file"
          },
          "segment_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the segment"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the search document"
          },
          "score": {
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "description": "Relevance score (0-1, higher is more relevant)"
          },
          "start_time": {
            "type": "number",
            "description": "Start time of the segment in seconds"
          },
          "end_time": {
            "type": "number",
            "description": "End time of the segment in seconds"
          },
          "title": {
            "type": "string",
            "nullable": true,
            "description": "Title associated with the segment"
          },
          "filename": {
            "type": "string",
            "nullable": true,
            "description": "Original filename of the video"
          },
          "visual_description": {
            "type": "array",
            "description": "Visual descriptions for the segment",
            "items": {
              "type": "object",
              "properties": {
                "text": {
                  "type": "string"
                },
                "start_time": {
                  "type": "number"
                },
                "end_time": {
                  "type": "number"
                }
              }
            }
          },
          "scene_text": {
            "type": "array",
            "description": "Text detected on screen in the segment",
            "items": {
              "type": "object",
              "properties": {
                "text": {
                  "type": "string"
                },
                "start_time": {
                  "type": "number"
                },
                "end_time": {
                  "type": "number"
                }
              }
            }
          },
          "speech": {
            "type": "array",
            "description": "Speech transcription for the segment",
            "items": {
              "type": "object",
              "properties": {
                "text": {
                  "type": "string"
                },
                "start_time": {
                  "type": "number"
                },
                "end_time": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "ThumbnailList": {
        "type": "object",
        "required": ["object", "total", "limit", "offset", "data"],
        "properties": {
          "object": {
            "type": "string",
            "enum": ["list"],
            "description": "Object type, always 'list'"
          },
          "total": {
            "type": "integer",
            "description": "Total number of segmentations matching the query"
          },
          "limit": {
            "type": "integer",
            "description": "Number of items returned in this response"
          },
          "offset": {
            "type": "integer",
            "description": "Offset from the start of the list"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Thumbnail"
            }
          }
        }
      },
      "Thumbnail": {
        "type": "object",
        "required": ["id", "url", "time"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the thumbnail"
          },
          "url": {
            "type": "string",
            "description": "The URL of the thumbnail"
          },
          "time": {
            "type": "number",
            "description": "The time of the thumbnail in seconds relative to the start of the video"
          },
          "segmentation_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the segmentation if part of a segmentation job"
          },
          "segment_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the segment if part of a segmentation job"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}
